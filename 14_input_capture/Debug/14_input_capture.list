
14_input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003c0  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000013c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003b8  080003b8  000013c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003b8  080003c0  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000013b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003bc  080003bc  000013bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003c0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003c0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000626  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a4  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004c  00000000  00000000  00001c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea3c  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d6e  00000000  00000000  000106c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000539b8  00000000  00000000  0001142e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064de6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00064e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00064ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003a0 	.word	0x080003a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003a0 	.word	0x080003a0

080001d8 <main>:
#include "stm32f4xx.h"
#include "timer.h"


int timestamp = 0;
int main (void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	tim2_pa5_output_compare();
 80001dc:	f000 f814 	bl	8000208 <tim2_pa5_output_compare>
	tim3_pa6_input_capture();
 80001e0:	f000 f85a 	bl	8000298 <tim3_pa6_input_capture>
	 number one, to be specific.Go to timer status register(TIMx_SR).Bit 1 is known as CC1F, known as capture/compare interrupt flag.
	 (Creating a symbolic name for this in the timer.h file)*/
     while(1){

    	 /*wait until the edges captured*/
    	 while(!(TIM3->SR &SR_CC1IF)){} //While it returns zero, meaning its not set, we want to wait here
 80001e4:	bf00      	nop
 80001e6:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <main+0x28>)
 80001e8:	691b      	ldr	r3, [r3, #16]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d0f9      	beq.n	80001e6 <main+0xe>

    	 /*read the captured counter value*/
    	 timestamp= TIM3->CCR1;
 80001f2:	4b03      	ldr	r3, [pc, #12]	@ (8000200 <main+0x28>)
 80001f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80001f6:	461a      	mov	r2, r3
 80001f8:	4b02      	ldr	r3, [pc, #8]	@ (8000204 <main+0x2c>)
 80001fa:	601a      	str	r2, [r3, #0]
    	 while(!(TIM3->SR &SR_CC1IF)){} //While it returns zero, meaning its not set, we want to wait here
 80001fc:	e7f2      	b.n	80001e4 <main+0xc>
 80001fe:	bf00      	nop
 8000200:	40000400 	.word	0x40000400
 8000204:	2000001c 	.word	0x2000001c

08000208 <tim2_pa5_output_compare>:
	TIM2->PSC = 1600-1;
	TIM2->ARR =10000-1;
	TIM2->CNT =0;
	TIM2->CR1 = CR1_CEN;
}
void tim2_pa5_output_compare(void){
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= GPIOAEN;
 800020c:	4b20      	ldr	r3, [pc, #128]	@ (8000290 <tim2_pa5_output_compare+0x88>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000210:	4a1f      	ldr	r2, [pc, #124]	@ (8000290 <tim2_pa5_output_compare+0x88>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER &=~(1U<<10);
 8000218:	4b1e      	ldr	r3, [pc, #120]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1d      	ldr	r2, [pc, #116]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 800021e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000222:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 8000224:	4b1b      	ldr	r3, [pc, #108]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1a      	ldr	r2, [pc, #104]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 800022a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800022e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |=AFR5_TIM;
 8000230:	4b18      	ldr	r3, [pc, #96]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a17      	ldr	r2, [pc, #92]	@ (8000294 <tim2_pa5_output_compare+0x8c>)
 8000236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800023a:	6213      	str	r3, [r2, #32]
	RCC->APB1ENR |=TIM2EN;
 800023c:	4b14      	ldr	r3, [pc, #80]	@ (8000290 <tim2_pa5_output_compare+0x88>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000240:	4a13      	ldr	r2, [pc, #76]	@ (8000290 <tim2_pa5_output_compare+0x88>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 1600-1;
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR =10000-1;
 8000252:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000256:	f242 720f 	movw	r2, #9999	@ 0x270f
 800025a:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CCMR1 = (1U<<4)| (1U<<5);
 800025c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000260:	2230      	movs	r2, #48	@ 0x30
 8000262:	619a      	str	r2, [r3, #24]
    TIM2->CCER |= CCER_CC1E;
 8000264:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000268:	6a1b      	ldr	r3, [r3, #32]
 800026a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6213      	str	r3, [r2, #32]
	TIM2->CNT =0;
 8000274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000278:	2200      	movs	r2, #0
 800027a:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CR1 = CR1_CEN;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000280:	2201      	movs	r2, #1
 8000282:	601a      	str	r2, [r3, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40023800 	.word	0x40023800
 8000294:	40020000 	.word	0x40020000

08000298 <tim3_pa6_input_capture>:

/*Go to Block diagram of alternate function mapping in datasheet.We can see PA6 here when we set AF02,we have this act in as TIM3_CH1.
So we can configure PA6 to be acting as timer three channel one over here, such that we can connect the input whose toggle rate we want
to capture at PA6.*/

void tim3_pa6_input_capture(void){
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800029c:	4b16      	ldr	r3, [pc, #88]	@ (80002f8 <tim3_pa6_input_capture+0x60>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a15      	ldr	r2, [pc, #84]	@ (80002f8 <tim3_pa6_input_capture+0x60>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Set PA6 mode to alternate function - PA6 occupy but 12 and 13*/
	GPIOA->MODER &=~(1U<<12); //first bit 12 is set to zero
 80002a8:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <tim3_pa6_input_capture+0x64>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a13      	ldr	r2, [pc, #76]	@ (80002fc <tim3_pa6_input_capture+0x64>)
 80002ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<13); //second bit 13 is set to one
 80002b4:	4b11      	ldr	r3, [pc, #68]	@ (80002fc <tim3_pa6_input_capture+0x64>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a10      	ldr	r2, [pc, #64]	@ (80002fc <tim3_pa6_input_capture+0x64>)
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002be:	6013      	str	r3, [r2, #0]

	/*Set PA6 alternate function type to TIM3_CH1(AF02) - go to reference manual, GPIOx_AFRL.Because we are using PA6 , we are interested in AFRL6.
	 For AF2 we have to set the second bit to 1.In AFRL6[3:0] the second bit is 25, so we have to set bit 25 to one, we've created a symbolic name for this. */
	GPIOA->AFR[0]=AFR6_TIM;
 80002c0:	4b0e      	ldr	r3, [pc, #56]	@ (80002fc <tim3_pa6_input_capture+0x64>)
 80002c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80002c6:	621a      	str	r2, [r3, #32]

	/*Enable clock access tim3 - Timer3 is located in the APB1 register just like timer2,Timer3 is bit number one.*/
	RCC->APB1ENR |= TIM3EN;
 80002c8:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <tim3_pa6_input_capture+0x60>)
 80002ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002cc:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <tim3_pa6_input_capture+0x60>)
 80002ce:	f043 0302 	orr.w	r3, r3, #2
 80002d2:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Set prescaler value to slow down the clock by dividing means setting the prescaler value*/
	TIM3->PSC = 16000-1; // this is basically dividing our clock --> 16 000 000/16 000
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <tim3_pa6_input_capture+0x68>)
 80002d6:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002da:	629a      	str	r2, [r3, #40]	@ 0x28
	/*Set CH1 to capture at every edge(raising/falling) to input capture - Go to capture/compare mode register in our reference manual go to TIMx_CCMR1(for TIM1). We're interested in bit 0 here.
	 We need to be careful because same register is for output compare & input capture.So when we scroll down to the documentation , it tells us of output compare hence OC.
	 Then we get to a section known as input capture mode, meaning the same bit but this is the meaning of the bits when we work in an input capture mode.So we scroll down to bit 0.
	 Bit 0 here is called a capture/compare selection.Go to CC1S it says , if we set bit to 00 it's configured as output, when we set this to 01 channel is configured as inputs.
	 we're going to use that one zero and the input has various modes,TI1,TI2, for now we're not going to use any mode , we're going to configure it as input over here by setting bit zero to 1.*/
	TIM3->CCMR1 = CCER_CC1S;
 80002dc:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <tim3_pa6_input_capture+0x68>)
 80002de:	2201      	movs	r2, #1
 80002e0:	619a      	str	r2, [r3, #24]

	/*Set CH1 to capture at rising edge - Go to TIMx_CCER register(for TIM1).Go to CC1E.For channel configured as input bit. We set bit zero to one to enable capture and when we leave the other bits the same,
	  we would end up capturing at raising edge, if we wanted to capture at a falling edge, we would have to configure other bits as well, but default setting is raising.*/
	TIM3->CCER = CCER_CC1E; //it is the same bit here, we used this for output compare.
 80002e2:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <tim3_pa6_input_capture+0x68>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	621a      	str	r2, [r3, #32]

	/*Enable TIM3 - Similar to what we did for timer2,CR1_CEN for timer2 is bit zero, for timer3 is bit zero as well.*/
	TIM3->CR1 = CR1_CEN;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <tim3_pa6_input_capture+0x68>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	601a      	str	r2, [r3, #0]

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40023800 	.word	0x40023800
 80002fc:	40020000 	.word	0x40020000
 8000300:	40000400 	.word	0x40000400

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	@ (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	@ (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	@ (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	@ (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	@ (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ff4f 	bl	80001d8 <main>

0800033a <LoopForever>:

LoopForever:
  b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000348:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 800034c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000350:	20000020 	.word	0x20000020

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	@ (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	@ (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	@ (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	@ (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
